# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import dht_pb2 as dht__pb2


class DHTStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.join = channel.unary_unary(
                '/dht.DHT/join',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.NodeInfo.FromString,
                )
        self.leave = channel.unary_unary(
                '/dht.DHT/leave',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.store = channel.unary_unary(
                '/dht.DHT/store',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.KeyValue.FromString,
                )
        self.retrieve = channel.unary_unary(
                '/dht.DHT/retrieve',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.KeyValue.FromString,
                )
        self.findSuccessor = channel.unary_unary(
                '/dht.DHT/findSuccessor',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.NodeInfo.FromString,
                )
        self.notify = channel.unary_unary(
                '/dht.DHT/notify',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.getPredecessor = channel.unary_unary(
                '/dht.DHT/getPredecessor',
                request_serializer=dht__pb2.Empty.SerializeToString,
                response_deserializer=dht__pb2.NodeInfo.FromString,
                )
        self.getSuccessor = channel.unary_unary(
                '/dht.DHT/getSuccessor',
                request_serializer=dht__pb2.Empty.SerializeToString,
                response_deserializer=dht__pb2.NodeInfo.FromString,
                )
        self.insertData = channel.unary_unary(
                '/dht.DHT/insertData',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.retrieveData = channel.unary_unary(
                '/dht.DHT/retrieveData',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.KeyValue.FromString,
                )
        self.replicate = channel.unary_unary(
                '/dht.DHT/replicate',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.replicate1 = channel.unary_unary(
                '/dht.DHT/replicate1',
                request_serializer=dht__pb2.KeyValue.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.updateSuccessor = channel.unary_unary(
                '/dht.DHT/updateSuccessor',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.updatePredecessor = channel.unary_unary(
                '/dht.DHT/updatePredecessor',
                request_serializer=dht__pb2.NodeInfo.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )
        self.getSuccessorList = channel.unary_unary(
                '/dht.DHT/getSuccessorList',
                request_serializer=dht__pb2.Empty.SerializeToString,
                response_deserializer=dht__pb2.SuccList.FromString,
                )
        self.ping = channel.unary_unary(
                '/dht.DHT/ping',
                request_serializer=dht__pb2.Empty.SerializeToString,
                response_deserializer=dht__pb2.Empty.FromString,
                )


class DHTServicer(object):
    """Missing associated documentation comment in .proto file."""

    def join(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def leave(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def store(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def retrieve(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def findSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def notify(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insertData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def retrieveData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def replicate1(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatePredecessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getSuccessorList(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DHTServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'join': grpc.unary_unary_rpc_method_handler(
                    servicer.join,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.NodeInfo.SerializeToString,
            ),
            'leave': grpc.unary_unary_rpc_method_handler(
                    servicer.leave,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'store': grpc.unary_unary_rpc_method_handler(
                    servicer.store,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.KeyValue.SerializeToString,
            ),
            'retrieve': grpc.unary_unary_rpc_method_handler(
                    servicer.retrieve,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.KeyValue.SerializeToString,
            ),
            'findSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.findSuccessor,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.NodeInfo.SerializeToString,
            ),
            'notify': grpc.unary_unary_rpc_method_handler(
                    servicer.notify,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'getPredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.getPredecessor,
                    request_deserializer=dht__pb2.Empty.FromString,
                    response_serializer=dht__pb2.NodeInfo.SerializeToString,
            ),
            'getSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.getSuccessor,
                    request_deserializer=dht__pb2.Empty.FromString,
                    response_serializer=dht__pb2.NodeInfo.SerializeToString,
            ),
            'insertData': grpc.unary_unary_rpc_method_handler(
                    servicer.insertData,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'retrieveData': grpc.unary_unary_rpc_method_handler(
                    servicer.retrieveData,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.KeyValue.SerializeToString,
            ),
            'replicate': grpc.unary_unary_rpc_method_handler(
                    servicer.replicate,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'replicate1': grpc.unary_unary_rpc_method_handler(
                    servicer.replicate1,
                    request_deserializer=dht__pb2.KeyValue.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'updateSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSuccessor,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'updatePredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.updatePredecessor,
                    request_deserializer=dht__pb2.NodeInfo.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
            'getSuccessorList': grpc.unary_unary_rpc_method_handler(
                    servicer.getSuccessorList,
                    request_deserializer=dht__pb2.Empty.FromString,
                    response_serializer=dht__pb2.SuccList.SerializeToString,
            ),
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=dht__pb2.Empty.FromString,
                    response_serializer=dht__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dht.DHT', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DHT(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/join',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def leave(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/leave',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def store(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/store',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.KeyValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def retrieve(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/retrieve',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.KeyValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def findSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/findSuccessor',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def notify(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/notify',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/getPredecessor',
            dht__pb2.Empty.SerializeToString,
            dht__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/getSuccessor',
            dht__pb2.Empty.SerializeToString,
            dht__pb2.NodeInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insertData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/insertData',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def retrieveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/retrieveData',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.KeyValue.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replicate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/replicate',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def replicate1(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/replicate1',
            dht__pb2.KeyValue.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/updateSuccessor',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updatePredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/updatePredecessor',
            dht__pb2.NodeInfo.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getSuccessorList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/getSuccessorList',
            dht__pb2.Empty.SerializeToString,
            dht__pb2.SuccList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dht.DHT/ping',
            dht__pb2.Empty.SerializeToString,
            dht__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
